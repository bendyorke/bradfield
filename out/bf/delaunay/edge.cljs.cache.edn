{:use-macros nil, :excludes #{}, :name bf.delaunay.edge, :imports nil, :requires nil, :uses nil, :defs {make {:protocol-inline nil, :meta {:file "/Users/bendyorke/Code/bradfield/src/bf/delaunay/edge.cljs", :line 3, :column 7, :end-line 3, :end-column 11, :arglists (quote ([edge & {:keys [rotation flip]}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(edge {:keys [rotation flip]})], :arglists ([edge & {:keys [rotation flip]}]), :arglists-meta (nil)}}, :name bf.delaunay.edge/make, :variadic true, :file "/Users/bendyorke/Code/bradfield/src/bf/delaunay/edge.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(edge {:keys [rotation flip]})], :arglists ([edge & {:keys [rotation flip]}]), :arglists-meta (nil)}, :method-params [(edge {:keys [rotation flip]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists ([edge & {:keys [rotation flip]}])}, rotate {:protocol-inline nil, :meta {:file "/Users/bendyorke/Code/bradfield/src/bf/delaunay/edge.cljs", :line 5, :column 7, :end-line 5, :end-column 13, :arglists (quote ([{:keys [rotation flip], :as edge}]))}, :name bf.delaunay.edge/rotate, :variadic false, :file "/Users/bendyorke/Code/bradfield/src/bf/delaunay/edge.cljs", :end-column 13, :method-params ([p__28438]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rotation flip], :as edge}]))}, flip {:protocol-inline nil, :meta {:file "/Users/bendyorke/Code/bradfield/src/bf/delaunay/edge.cljs", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([{:keys [rotation flip], :as edge}]))}, :name bf.delaunay.edge/flip, :variadic false, :file "/Users/bendyorke/Code/bradfield/src/bf/delaunay/edge.cljs", :end-column 11, :method-params ([p__28443]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rotation flip], :as edge}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:rotation :flip}, :order [:rotation :flip]}, :doc nil}